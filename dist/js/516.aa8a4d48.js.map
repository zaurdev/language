{"version":3,"file":"js/516.aa8a4d48.js","mappings":"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","sources":["webpack://language/./src/views/Home.vue?ba0d","webpack://language/./src/indexDB.js","webpack://language/src/views/Home.vue","webpack://language/./src/views/Home.vue?aa8f","webpack://language/./src/views/Home.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-12 mt-3\"},[_c('app-navbar')],1),_c('div',{staticClass:\"col-lg-12 mt-3\"},[_c('router-view',{attrs:{\"randomElements\":_vm.randomElements,\"itemsForAdd\":_vm.itemsForAdd},on:{\"inputSubmit\":function($event){return _vm.addData($event)},\"deleteAdd\":function($event){return _vm.deleteDataAdd($event)}}})],1)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// indexedDB.js\n\nconst DB_NAME = \"language\";\nconst DB_VERSION = 1;\nconst STORE_NAME = \"words\";\n\nlet db;\n\nexport function initDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n    request.onerror = () => {\n      reject(\"IndexedDB başlatılamadı.\");\n    };\n\n    request.onsuccess = () => {\n      db = request.result;\n      resolve(\"IndexedDB başarıyla başlatıldı.\");\n    };\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      const objectStore = db.createObjectStore(STORE_NAME, { keyPath: \"id\", autoIncrement: true });\n      objectStore.createIndex(\"timestamp\", \"timestamp\", { unique: false });\n    };\n  });\n}\n\nexport function getDB() {\n  return db;\n}","<template>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-lg-12 mt-3\">\n                <app-navbar />\n            </div>\n            <div class=\"col-lg-12 mt-3\">\n                <router-view \n                        :randomElements=\"randomElements\" \n                        @inputSubmit=\"addData($event)\" \n                        :itemsForAdd=\"itemsForAdd\"\n                        @deleteAdd=\"deleteDataAdd($event)\" \n                    />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { initDB, getDB } from \"../indexDB\";\nexport default {\n    data() {\n        return {\n            itemsForAdd: [],\n        }\n    },\n    components: {\n        \"app-navbar\": () => import('../components/navbar.vue'),\n    },\n    computed: {\n        randomElements() {\n            const shuffledList = this.shuffleArray(this.list);\n            return shuffledList.slice(0, 7);\n        }\n    },\n    methods: {\n        shuffleArray(array) {\n            let shuffled = this.itemsForAdd.slice(0), i = this.itemsForAdd.length, temp, index;\n            while (i-- > 0) {\n                index = Math.floor((i + 1) * Math.random());\n                temp = shuffled[index];\n                shuffled[index] = shuffled[i];\n                shuffled[i] = temp;\n            }\n            return shuffled;\n        },\n        deleteDataAdd(id) {\n            const db = getDB();\n            const transaction = db.transaction([\"words\"], \"readwrite\");\n            const objectStore = transaction.objectStore(\"words\");\n\n            const request = objectStore.delete(id);\n\n            request.onsuccess = () => {\n                this.getDataAdd();\n            };\n            request.onerror = () => { };\n        },\n        getDataAdd() {\n            const db = getDB();\n            const transaction = db.transaction([\"words\"], \"readonly\");\n            const objectStore = transaction.objectStore(\"words\");\n            const request = objectStore.index(\"timestamp\").openCursor(null, \"prev\");\n            const result = [];\n            request.onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    result.push(cursor.value);\n                    cursor.continue();\n                } else {\n                    this.itemsForAdd = result;\n                }\n            };\n        },\n        addData(word) {\n            let wordObj = { ...word, timestamp: new Date().getTime(), };\n            const db = getDB();\n            const transaction = db.transaction([\"words\"], \"readwrite\");\n            const objectStore = transaction.objectStore(\"words\");\n\n            const request = objectStore.add(wordObj);\n\n            request.onsuccess = () => {\n                this.getDataAdd();\n            };\n\n            request.onerror = () => {\n                console.error(\"Veri eklenirken bir hata oluştu.\");\n            };\n        },\n    },\n    mounted() {\n        initDB()\n            .then((message) => {\n                this.getDataAdd();\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n}\n</script>","import mod from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=344f62fe&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","randomElements","itemsForAdd","on","$event","addData","deleteDataAdd","staticRenderFns","DB_NAME","DB_VERSION","STORE_NAME","db","initDB","Promise","resolve","reject","request","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","event","target","objectStore","createObjectStore","keyPath","autoIncrement","createIndex","unique","getDB","data","components","computed","shuffledList","shuffleArray","list","slice","methods","array","temp","index","shuffled","i","length","Math","floor","random","id","transaction","delete","getDataAdd","openCursor","cursor","push","value","continue","word","wordObj","timestamp","Date","getTime","add","console","error","mounted","then","message","catch","err","log","component"],"sourceRoot":""}